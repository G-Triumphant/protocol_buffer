// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: avatarx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Avatarx_Proto_AnimationState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case cellAnimationStateNone // = 0
  case cellAnimationStateIdle // = 1
  case cellAnimationStateWalk // = 2

  init() {
    self = .cellAnimationStateNone
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cellAnimationStateNone
    case 1: self = .cellAnimationStateIdle
    case 2: self = .cellAnimationStateWalk
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .cellAnimationStateNone: return 0
    case .cellAnimationStateIdle: return 1
    case .cellAnimationStateWalk: return 2
    }
  }

}

#if swift(>=4.2)

extension Avatarx_Proto_AnimationState: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Avatarx_Proto_PublicAudioState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case enable // = 0
  case disable // = 1
  case notInRoom // = 2

  init() {
    self = .enable
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .enable
    case 1: self = .disable
    case 2: self = .notInRoom
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .enable: return 0
    case .disable: return 1
    case .notInRoom: return 2
    }
  }

}

#if swift(>=4.2)

extension Avatarx_Proto_PublicAudioState: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Avatarx_Proto_Float3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Float {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var z: Float {
    get {return _z ?? 0}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  mutating func clearZ() {self._z = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Float? = nil
  fileprivate var _y: Float? = nil
  fileprivate var _z: Float? = nil
}

///*
/// 旋转信息
struct Avatarx_Proto_Rotation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Float {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var z: Float {
    get {return _z ?? 0}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  mutating func clearZ() {self._z = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Float? = nil
  fileprivate var _y: Float? = nil
  fileprivate var _z: Float? = nil
}

struct Avatarx_Proto_Navigation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var position: Avatarx_Proto_Float3 {
    get {return _position ?? Avatarx_Proto_Float3()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var orientation: Float {
    get {return _orientation ?? 0}
    set {_orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return self._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {self._orientation = nil}

  var tiltAxis: Avatarx_Proto_Float3 {
    get {return _tiltAxis ?? Avatarx_Proto_Float3()}
    set {_tiltAxis = newValue}
  }
  /// Returns true if `tiltAxis` has been explicitly set.
  var hasTiltAxis: Bool {return self._tiltAxis != nil}
  /// Clears the value of `tiltAxis`. Subsequent reads from it will return its default value.
  mutating func clearTiltAxis() {self._tiltAxis = nil}

  var tiltAngle: Float {
    get {return _tiltAngle ?? 0}
    set {_tiltAngle = newValue}
  }
  /// Returns true if `tiltAngle` has been explicitly set.
  var hasTiltAngle: Bool {return self._tiltAngle != nil}
  /// Clears the value of `tiltAngle`. Subsequent reads from it will return its default value.
  mutating func clearTiltAngle() {self._tiltAngle = nil}

  var curState: Avatarx_Proto_AnimationState {
    get {return _curState ?? .cellAnimationStateNone}
    set {_curState = newValue}
  }
  /// Returns true if `curState` has been explicitly set.
  var hasCurState: Bool {return self._curState != nil}
  /// Clears the value of `curState`. Subsequent reads from it will return its default value.
  mutating func clearCurState() {self._curState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Avatarx_Proto_Float3? = nil
  fileprivate var _orientation: Float? = nil
  fileprivate var _tiltAxis: Avatarx_Proto_Float3? = nil
  fileprivate var _tiltAngle: Float? = nil
  fileprivate var _curState: Avatarx_Proto_AnimationState? = nil
}

///*
/// 用户信息
struct Avatarx_Proto_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 用户所使用的形象ID
  var avatarID: String {
    get {return _avatarID ?? String()}
    set {_avatarID = newValue}
  }
  /// Returns true if `avatarID` has been explicitly set.
  var hasAvatarID: Bool {return self._avatarID != nil}
  /// Clears the value of `avatarID`. Subsequent reads from it will return its default value.
  mutating func clearAvatarID() {self._avatarID = nil}

  ///*
  /// 用户临时唯一ID
  var userID: UInt32 {
    get {return _userID ?? 0}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  ///*
  /// 用户位置
  var position: Avatarx_Proto_Float3 {
    get {return _position ?? Avatarx_Proto_Float3()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  ///*
  /// 用户是否是公开房间的房主
  var publicMaster: Bool {
    get {return _publicMaster ?? false}
    set {_publicMaster = newValue}
  }
  /// Returns true if `publicMaster` has been explicitly set.
  var hasPublicMaster: Bool {return self._publicMaster != nil}
  /// Clears the value of `publicMaster`. Subsequent reads from it will return its default value.
  mutating func clearPublicMaster() {self._publicMaster = nil}

  ///*
  /// 用户是否是私有房间的房主
  var privateMaster: Bool {
    get {return _privateMaster ?? false}
    set {_privateMaster = newValue}
  }
  /// Returns true if `privateMaster` has been explicitly set.
  var hasPrivateMaster: Bool {return self._privateMaster != nil}
  /// Clears the value of `privateMaster`. Subsequent reads from it will return its default value.
  mutating func clearPrivateMaster() {self._privateMaster = nil}

  ///*
  /// 当前旋转
  var navigation: Avatarx_Proto_Navigation {
    get {return _navigation ?? Avatarx_Proto_Navigation()}
    set {_navigation = newValue}
  }
  /// Returns true if `navigation` has been explicitly set.
  var hasNavigation: Bool {return self._navigation != nil}
  /// Clears the value of `navigation`. Subsequent reads from it will return its default value.
  mutating func clearNavigation() {self._navigation = nil}

  ///*
  /// 公聊房间用户当前能否发声(是否闭麦)
  var publicAudio: Avatarx_Proto_PublicAudioState {
    get {return _publicAudio ?? .enable}
    set {_publicAudio = newValue}
  }
  /// Returns true if `publicAudio` has been explicitly set.
  var hasPublicAudio: Bool {return self._publicAudio != nil}
  /// Clears the value of `publicAudio`. Subsequent reads from it will return its default value.
  mutating func clearPublicAudio() {self._publicAudio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _avatarID: String? = nil
  fileprivate var _userID: UInt32? = nil
  fileprivate var _position: Avatarx_Proto_Float3? = nil
  fileprivate var _publicMaster: Bool? = nil
  fileprivate var _privateMaster: Bool? = nil
  fileprivate var _navigation: Avatarx_Proto_Navigation? = nil
  fileprivate var _publicAudio: Avatarx_Proto_PublicAudioState? = nil
}

///*
/// 登录请求
/// 类型:request
/// event:login
struct Avatarx_Proto_LoginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 用户所使用的形象ID
  var avatarID: String {
    get {return _avatarID ?? String()}
    set {_avatarID = newValue}
  }
  /// Returns true if `avatarID` has been explicitly set.
  var hasAvatarID: Bool {return self._avatarID != nil}
  /// Clears the value of `avatarID`. Subsequent reads from it will return its default value.
  mutating func clearAvatarID() {self._avatarID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _avatarID: String? = nil
}

///*
/// 登录请求
/// 类型:response
/// event:login
struct Avatarx_Proto_LoginResonse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  ///*
  /// 用户临时唯一ID
  var userID: UInt32 {
    get {return _userID ?? 0}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _userID: UInt32? = nil
}

///*
/// 音频状态切换
/// 类型:request
/// event:public_audio_state_change
struct Avatarx_Proto_PublicAudioStateChangeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 是否开启音频
  var publicAudio: Avatarx_Proto_PublicAudioState {
    get {return _publicAudio ?? .enable}
    set {_publicAudio = newValue}
  }
  /// Returns true if `publicAudio` has been explicitly set.
  var hasPublicAudio: Bool {return self._publicAudio != nil}
  /// Clears the value of `publicAudio`. Subsequent reads from it will return its default value.
  mutating func clearPublicAudio() {self._publicAudio = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _publicAudio: Avatarx_Proto_PublicAudioState? = nil
}

///*
/// 音频状态切换
/// 类型:response
/// event:public_audio_state_change
struct Avatarx_Proto_PublicAudioStateChangeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
}

///*
/// 创建房间
/// 类型:request
/// event:create_public_room
struct Avatarx_Proto_CreatePublicRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 用户所使用的形象ID
  var avatarID: String {
    get {return _avatarID ?? String()}
    set {_avatarID = newValue}
  }
  /// Returns true if `avatarID` has been explicitly set.
  var hasAvatarID: Bool {return self._avatarID != nil}
  /// Clears the value of `avatarID`. Subsequent reads from it will return its default value.
  mutating func clearAvatarID() {self._avatarID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _avatarID: String? = nil
}

///*
/// 创建房间
/// 类型:response
/// event:create_public_room
struct Avatarx_Proto_CreatePublicRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  ///*
  /// 房间ID
  var roomID: String {
    get {return _roomID ?? String()}
    set {_roomID = newValue}
  }
  /// Returns true if `roomID` has been explicitly set.
  var hasRoomID: Bool {return self._roomID != nil}
  /// Clears the value of `roomID`. Subsequent reads from it will return its default value.
  mutating func clearRoomID() {self._roomID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _roomID: String? = nil
}

///*
/// 移动(deprecated)
/// 类型:request
/// event:move
struct Avatarx_Proto_MoveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 位置
  var position: Avatarx_Proto_Float3 {
    get {return _position ?? Avatarx_Proto_Float3()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _position: Avatarx_Proto_Float3? = nil
}

///*
/// 移动(deprecated)
/// 类型:response
/// event:move
struct Avatarx_Proto_MoveResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
}

///*
/// 移动提示(deprecated)
/// 类型:notification
/// event:move_notification
struct Avatarx_Proto_MoveNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 加入的用户信息
  var user: Avatarx_Proto_UserInfo {
    get {return _user ?? Avatarx_Proto_UserInfo()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Avatarx_Proto_UserInfo? = nil
}

///*
/// 移动
/// 类型:request
/// event:user_state_sync
struct Avatarx_Proto_UserStateSyncRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 位置
  var navigation: Avatarx_Proto_Navigation {
    get {return _navigation ?? Avatarx_Proto_Navigation()}
    set {_navigation = newValue}
  }
  /// Returns true if `navigation` has been explicitly set.
  var hasNavigation: Bool {return self._navigation != nil}
  /// Clears the value of `navigation`. Subsequent reads from it will return its default value.
  mutating func clearNavigation() {self._navigation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _navigation: Avatarx_Proto_Navigation? = nil
}

///*
/// 移动
/// 类型:response
/// event:user_state_sync
struct Avatarx_Proto_UserStateSyncResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
}

///*
/// 加入房间
/// 类型:request
/// event:join_public_room
struct Avatarx_Proto_JoinPublicRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 房间ID
  var roomID: String {
    get {return _roomID ?? String()}
    set {_roomID = newValue}
  }
  /// Returns true if `roomID` has been explicitly set.
  var hasRoomID: Bool {return self._roomID != nil}
  /// Clears the value of `roomID`. Subsequent reads from it will return its default value.
  mutating func clearRoomID() {self._roomID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _roomID: String? = nil
}

///*
/// 加入房间
/// 类型:response
/// event:join_public_room
struct Avatarx_Proto_JoinPublicRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  ///*
  /// 声网RTC的token,用于加入房间
  var agoraRtcToken: String {
    get {return _agoraRtcToken ?? String()}
    set {_agoraRtcToken = newValue}
  }
  /// Returns true if `agoraRtcToken` has been explicitly set.
  var hasAgoraRtcToken: Bool {return self._agoraRtcToken != nil}
  /// Clears the value of `agoraRtcToken`. Subsequent reads from it will return its default value.
  mutating func clearAgoraRtcToken() {self._agoraRtcToken = nil}

  ///*
  /// 声网的appid
  var appid: String {
    get {return _appid ?? String()}
    set {_appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return self._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {self._appid = nil}

  ///*
  /// 当前已在房间的用户信息
  var users: [Avatarx_Proto_UserInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _agoraRtcToken: String? = nil
  fileprivate var _appid: String? = nil
}

///*
/// 加入房间
/// 类型:notification
/// event:join_public_room_notification
struct Avatarx_Proto_JoinPublicRoomNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 加入的用户信息
  var user: Avatarx_Proto_UserInfo {
    get {return _user ?? Avatarx_Proto_UserInfo()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Avatarx_Proto_UserInfo? = nil
}

///*
/// 离开公开房间
/// 类型:request
/// event:leave_public_room
struct Avatarx_Proto_LeavePublicRoomRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// 离开公开房间
/// 类型:response
/// event:leave_public_room
struct Avatarx_Proto_LeavePublicRoomResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 状态码,详见错误码文档
  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  ///*
  /// 错误信息,详见错误码文档
  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
}

///*
/// 当前房间用户信息同步
/// 类型:notification
/// event:user_sync_notification
struct Avatarx_Proto_UserSyncNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 当前房间所有用户的信息
  var user: [Avatarx_Proto_UserInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// 房间解散(房主退出)
/// 类型:notification
/// event:disband_public_room_notification
struct Avatarx_Proto_DisbandPublicRoomNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// 加入私聊房间
/// 类型:notification
/// event:join_private_room_notification
struct Avatarx_Proto_JoinPrivateRoomNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 声网RTC的token,用于加入房间
  var agoraRtcToken: String {
    get {return _agoraRtcToken ?? String()}
    set {_agoraRtcToken = newValue}
  }
  /// Returns true if `agoraRtcToken` has been explicitly set.
  var hasAgoraRtcToken: Bool {return self._agoraRtcToken != nil}
  /// Clears the value of `agoraRtcToken`. Subsequent reads from it will return its default value.
  mutating func clearAgoraRtcToken() {self._agoraRtcToken = nil}

  ///*
  /// 声网的appid
  var appid: String {
    get {return _appid ?? String()}
    set {_appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return self._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {self._appid = nil}

  ///*
  /// 房间ID
  var roomID: String {
    get {return _roomID ?? String()}
    set {_roomID = newValue}
  }
  /// Returns true if `roomID` has been explicitly set.
  var hasRoomID: Bool {return self._roomID != nil}
  /// Clears the value of `roomID`. Subsequent reads from it will return its default value.
  mutating func clearRoomID() {self._roomID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _agoraRtcToken: String? = nil
  fileprivate var _appid: String? = nil
  fileprivate var _roomID: String? = nil
}

///*
/// 离开私聊房间
/// 类型:notification
/// event:leave_private_room_notification
struct Avatarx_Proto_LeavePrivateRoomNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///*
/// 私聊房主变更(原房主离开私聊房间)
/// 类型:notification
/// event:master_change_private_room_notification
struct Avatarx_Proto_MasterChangePrivateRoomNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// 新的房主ID
  var userID: UInt32 {
    get {return _userID ?? 0}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "avatarx.proto"

extension Avatarx_Proto_AnimationState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CELL_ANIMATION_STATE_NONE"),
    1: .same(proto: "CELL_ANIMATION_STATE_IDLE"),
    2: .same(proto: "CELL_ANIMATION_STATE_WALK"),
  ]
}

extension Avatarx_Proto_PublicAudioState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENABLE"),
    1: .same(proto: "DISABLE"),
    2: .same(proto: "NOT_IN_ROOM"),
  ]
}

extension Avatarx_Proto_Float3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Float3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public var isInitialized: Bool {
    if self._x == nil {return false}
    if self._y == nil {return false}
    if self._z == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._x)
      case 2: try decoder.decodeSingularFloatField(value: &self._y)
      case 3: try decoder.decodeSingularFloatField(value: &self._z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_Float3, rhs: Avatarx_Proto_Float3) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_Rotation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Rotation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public var isInitialized: Bool {
    if self._x == nil {return false}
    if self._y == nil {return false}
    if self._z == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self._x)
      case 2: try decoder.decodeSingularFloatField(value: &self._y)
      case 3: try decoder.decodeSingularFloatField(value: &self._z)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_Rotation, rhs: Avatarx_Proto_Rotation) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_Navigation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Navigation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "orientation"),
    3: .standard(proto: "tilt_axis"),
    4: .standard(proto: "tilt_angle"),
    5: .standard(proto: "cur_state"),
  ]

  public var isInitialized: Bool {
    if self._position == nil {return false}
    if self._orientation == nil {return false}
    if self._tiltAxis == nil {return false}
    if self._tiltAngle == nil {return false}
    if self._curState == nil {return false}
    if let v = self._position, !v.isInitialized {return false}
    if let v = self._tiltAxis, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      case 2: try decoder.decodeSingularFloatField(value: &self._orientation)
      case 3: try decoder.decodeSingularMessageField(value: &self._tiltAxis)
      case 4: try decoder.decodeSingularFloatField(value: &self._tiltAngle)
      case 5: try decoder.decodeSingularEnumField(value: &self._curState)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._orientation {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._tiltAxis {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._tiltAngle {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._curState {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_Navigation, rhs: Avatarx_Proto_Navigation) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs._tiltAxis != rhs._tiltAxis {return false}
    if lhs._tiltAngle != rhs._tiltAngle {return false}
    if lhs._curState != rhs._curState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_id"),
    2: .standard(proto: "user_id"),
    3: .same(proto: "position"),
    4: .standard(proto: "public_master"),
    5: .standard(proto: "private_master"),
    7: .same(proto: "navigation"),
    8: .standard(proto: "public_audio"),
  ]

  public var isInitialized: Bool {
    if self._avatarID == nil {return false}
    if self._userID == nil {return false}
    if self._position == nil {return false}
    if self._publicMaster == nil {return false}
    if self._privateMaster == nil {return false}
    if self._publicAudio == nil {return false}
    if let v = self._position, !v.isInitialized {return false}
    if let v = self._navigation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._avatarID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._userID)
      case 3: try decoder.decodeSingularMessageField(value: &self._position)
      case 4: try decoder.decodeSingularBoolField(value: &self._publicMaster)
      case 5: try decoder.decodeSingularBoolField(value: &self._privateMaster)
      case 7: try decoder.decodeSingularMessageField(value: &self._navigation)
      case 8: try decoder.decodeSingularEnumField(value: &self._publicAudio)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._avatarID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._userID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._publicMaster {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._privateMaster {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._navigation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._publicAudio {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_UserInfo, rhs: Avatarx_Proto_UserInfo) -> Bool {
    if lhs._avatarID != rhs._avatarID {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._position != rhs._position {return false}
    if lhs._publicMaster != rhs._publicMaster {return false}
    if lhs._privateMaster != rhs._privateMaster {return false}
    if lhs._navigation != rhs._navigation {return false}
    if lhs._publicAudio != rhs._publicAudio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_LoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoginRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_id"),
  ]

  public var isInitialized: Bool {
    if self._avatarID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._avatarID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._avatarID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_LoginRequest, rhs: Avatarx_Proto_LoginRequest) -> Bool {
    if lhs._avatarID != rhs._avatarID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_LoginResonse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoginResonse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .standard(proto: "user_id"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._userID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_LoginResonse, rhs: Avatarx_Proto_LoginResonse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_PublicAudioStateChangeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicAudioStateChangeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_audio"),
  ]

  public var isInitialized: Bool {
    if self._publicAudio == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._publicAudio)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._publicAudio {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_PublicAudioStateChangeRequest, rhs: Avatarx_Proto_PublicAudioStateChangeRequest) -> Bool {
    if lhs._publicAudio != rhs._publicAudio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_PublicAudioStateChangeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicAudioStateChangeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_PublicAudioStateChangeResponse, rhs: Avatarx_Proto_PublicAudioStateChangeResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_CreatePublicRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreatePublicRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "avatar_id"),
  ]

  public var isInitialized: Bool {
    if self._avatarID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._avatarID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._avatarID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_CreatePublicRoomRequest, rhs: Avatarx_Proto_CreatePublicRoomRequest) -> Bool {
    if lhs._avatarID != rhs._avatarID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_CreatePublicRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreatePublicRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .standard(proto: "room_id"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      case 3: try decoder.decodeSingularStringField(value: &self._roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._roomID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_CreatePublicRoomResponse, rhs: Avatarx_Proto_CreatePublicRoomResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs._roomID != rhs._roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_MoveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoveRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
  ]

  public var isInitialized: Bool {
    if self._position == nil {return false}
    if let v = self._position, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_MoveRequest, rhs: Avatarx_Proto_MoveRequest) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_MoveResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoveResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_MoveResponse, rhs: Avatarx_Proto_MoveResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_MoveNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoveNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public var isInitialized: Bool {
    if self._user == nil {return false}
    if let v = self._user, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_MoveNotification, rhs: Avatarx_Proto_MoveNotification) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_UserStateSyncRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserStateSyncRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "navigation"),
  ]

  public var isInitialized: Bool {
    if self._navigation == nil {return false}
    if let v = self._navigation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._navigation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._navigation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_UserStateSyncRequest, rhs: Avatarx_Proto_UserStateSyncRequest) -> Bool {
    if lhs._navigation != rhs._navigation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_UserStateSyncResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserStateSyncResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_UserStateSyncResponse, rhs: Avatarx_Proto_UserStateSyncResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_JoinPublicRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinPublicRoomRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "room_id"),
  ]

  public var isInitialized: Bool {
    if self._roomID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._roomID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roomID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_JoinPublicRoomRequest, rhs: Avatarx_Proto_JoinPublicRoomRequest) -> Bool {
    if lhs._roomID != rhs._roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_JoinPublicRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinPublicRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .standard(proto: "agora_rtc_token"),
    4: .same(proto: "appid"),
    5: .same(proto: "users"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.users) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      case 3: try decoder.decodeSingularStringField(value: &self._agoraRtcToken)
      case 4: try decoder.decodeSingularStringField(value: &self._appid)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.users)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._agoraRtcToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._appid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_JoinPublicRoomResponse, rhs: Avatarx_Proto_JoinPublicRoomResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs._agoraRtcToken != rhs._agoraRtcToken {return false}
    if lhs._appid != rhs._appid {return false}
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_JoinPublicRoomNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinPublicRoomNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public var isInitialized: Bool {
    if self._user == nil {return false}
    if let v = self._user, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_JoinPublicRoomNotification, rhs: Avatarx_Proto_JoinPublicRoomNotification) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_LeavePublicRoomRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeavePublicRoomRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_LeavePublicRoomRequest, rhs: Avatarx_Proto_LeavePublicRoomRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_LeavePublicRoomResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeavePublicRoomResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_LeavePublicRoomResponse, rhs: Avatarx_Proto_LeavePublicRoomResponse) -> Bool {
    if lhs._code != rhs._code {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_UserSyncNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserSyncNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.user) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.user)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.user.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.user, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_UserSyncNotification, rhs: Avatarx_Proto_UserSyncNotification) -> Bool {
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_DisbandPublicRoomNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisbandPublicRoomNotification"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_DisbandPublicRoomNotification, rhs: Avatarx_Proto_DisbandPublicRoomNotification) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_JoinPrivateRoomNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinPrivateRoomNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "agora_rtc_token"),
    4: .same(proto: "appid"),
    1: .standard(proto: "room_id"),
  ]

  public var isInitialized: Bool {
    if self._roomID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._roomID)
      case 3: try decoder.decodeSingularStringField(value: &self._agoraRtcToken)
      case 4: try decoder.decodeSingularStringField(value: &self._appid)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._roomID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._agoraRtcToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._appid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_JoinPrivateRoomNotification, rhs: Avatarx_Proto_JoinPrivateRoomNotification) -> Bool {
    if lhs._agoraRtcToken != rhs._agoraRtcToken {return false}
    if lhs._appid != rhs._appid {return false}
    if lhs._roomID != rhs._roomID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_LeavePrivateRoomNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeavePrivateRoomNotification"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_LeavePrivateRoomNotification, rhs: Avatarx_Proto_LeavePrivateRoomNotification) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Avatarx_Proto_MasterChangePrivateRoomNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MasterChangePrivateRoomNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  public var isInitialized: Bool {
    if self._userID == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._userID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._userID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Avatarx_Proto_MasterChangePrivateRoomNotification, rhs: Avatarx_Proto_MasterChangePrivateRoomNotification) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
